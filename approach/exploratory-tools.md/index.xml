<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploratory analysis tools on the Forvision project</title>
    <link>/approach/exploratory-tools.md/</link>
    <description>Recent content in Exploratory analysis tools on the Forvision project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/approach/exploratory-tools.md/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Prediction-Realization Diagram</title>
      <link>/approach/exploratory-tools.md/prd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/approach/exploratory-tools.md/prd/</guid>
      <description>The function plotPRD of the forvision package plots the Prediction-Realization Diagram for the given data from dataset containing columns value, forecast, and method (AFTS).
Here’s a prediction-realization diagram created by the function plotPRD:
# Load time series and forecast data from url ts &amp;lt;- read.csv(&amp;#34;https://forvis.github.io/data/M3_yearly_TSTS.csv&amp;#34;, stringsAsFactors = FALSE) fc &amp;lt;- read.csv(&amp;#34;https://forvis.github.io/data/M3_yearly_FTS.csv&amp;#34;, stringsAsFactors = FALSE) # Create AFTS shema library(forvision) af &amp;lt;- createAFTS(ts, fc) plotPRD(af) The resulting prediction-relization digram plotted in logarithmic scales by using the option setting useLog = TRUE:</description>
    </item>
    
    <item>
      <title>Fanchart</title>
      <link>/approach/exploratory-tools.md/fanchart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/approach/exploratory-tools.md/fanchart/</guid>
      <description>The function plotFAN of the forvision package plots the fanchart for the given data from dataset.
Here’s a fanchart created by the function plotFAN for time series of id = &amp;ldquo;M350&amp;rdquo;:
# Load time series and forecast data from url ts &amp;lt;- read.csv(&amp;#34;https://forvis.github.io/data/M3_monthly_TSTS.csv&amp;#34;, stringsAsFactors = FALSE) fc &amp;lt;- read.csv(&amp;#34;https://forvis.github.io/data/M3_monthly_PIs_FTS.csv&amp;#34;, stringsAsFactors = FALSE) # prepare appropriate time-based object timestamp columns for the data_ts and data_fs library(zoo) ts$timestamp_dbo &amp;lt;- as.yearmon(ts$timestamp, format = &amp;#39;%Y-%m&amp;#39;) fc$timestamp_dbo &amp;lt;- as.</description>
    </item>
    
    <item>
      <title>Fixed origin graph</title>
      <link>/approach/exploratory-tools.md/fixed-origin-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/approach/exploratory-tools.md/fixed-origin-graph/</guid>
      <description>The function plotFixedOrigin of the forvision package plots the fixed origin graph for the given data from dataset.
Here’s a fixed origin graph created by the function plotFixedOrigin for time series of id = &amp;ldquo;M1&amp;rdquo;:
# Load time series and forecast data from url ts &amp;lt;- read.csv(&amp;#34;https://forvis.github.io/data/M3_monthly_TSTS.csv&amp;#34;, stringsAsFactors = FALSE) fc &amp;lt;- read.csv(&amp;#34;https://forvis.github.io/data/M3_monthly_FTS.csv&amp;#34;, stringsAsFactors = FALSE) # prepare appropriate time-based object timestamp columns for the data_ts and data_fs library(zoo) ts$timestamp_dbo &amp;lt;- as.</description>
    </item>
    
    <item>
      <title>Fixed horizon graph</title>
      <link>/approach/exploratory-tools.md/fixed-horizon-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/approach/exploratory-tools.md/fixed-horizon-graph/</guid>
      <description>Fixed horizon graph</description>
    </item>
    
  </channel>
</rss>